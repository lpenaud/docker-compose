networks:
  appnet:
  webnet:

services:
  db:
    image: postgres:15-alpine
    container_name: nextcloud_pg
    restart: always
    volumes:
      - db:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: "${POSTGRES_USER:-nextcloud}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD:?}"
      POSTGRES_DB: "${POSTGRES_DB:-nextcloud}"
    networks:
      - appnet

  redis:
    image: redis:7-alpine
    restart: always
    networks:
      - appnet

  app:
    build:
      context: ./nextcloud
      dockerfile: Dockerfile
      args:
        IMAGE_VERSION: 30
    container_name: nextcloud
    restart: always
    cap_add:
      - SYS_NICE
    volumes:
      - ${NEXTCLOUD_HTML:-./html}:/var/www/html
    environment:
      POSTGRES_HOST: db
      POSTGRES_USER: "${POSTGRES_USER:-nextcloud}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD:?}"
      POSTGRES_DB: "${POSTGRES_DB:-nextcloud}"
      REDIS_HOST: redis
      PHP_MEMORY_LIMIT: "${PHP_MEMORY_LIMIT:-512M}"
      PHP_UPLOAD_LIMIT: "${PHP_UPLOAD_LIMIT:-512M}"
    depends_on:
      - db
      - redis
      - imaginary
    networks:
      - appnet
      - webnet

  web:
    build: ./web
    restart: always
    volumes_from:
      - app:ro
    ports:
      - 8080:80
    depends_on:
      - app
    networks:
      - default
      - webnet

  imaginary:
    # Use alpine
    # See: https://github.com/nextcloud/all-in-one/tree/main/Containers/imaginary
    image: nextcloud/aio-imaginary:latest
    expose:
      - 9000
    restart: unless-stopped
    cap_add:
      - SYS_NICE
    networks:
      - appnet
    entrypoint:
      - imaginary
      - -return-size
      - -max-allowed-resolution
      - "222.2"
      - -concurrency
      - "${IMAGINARY_CONCURRENCY:-20}"

volumes:
  db:
